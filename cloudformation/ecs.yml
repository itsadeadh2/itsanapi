AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS CloudFormation Template to deploy a Fargate service"

Parameters:
  Revision:
    Type: String
    Description: 'Revision number of the deploy'
    Default: '0'
  Memory:
    Type: String
    Description: 'The amount of memory you want your task to have'
    Default: 0.5 GB
  CPU:
    Type: String
    Description: 'The amount of vCPUs you want your task to have'
    Default: .25 vCPU
  GoogleClientId:
    Type: String
    Description: 'Google client id'
  GoogleClientSecret:
    Type: String
    Description: 'Google client secret'
  FrontendCallbackURL:
    Type: String
    Description: 'The callback url of the frontend for oauth'
  LogLevel:
    Type: String
    Description: The desired loglevel for the application
    AllowedValues: ['debug', 'info', 'warning', 'error', 'fatal', 'critical']
    Default: 'info'
  DbUserName:
    Type: String
    Description: 'Database username'
  DbPassword:
    Type: String
    Description: 'Database password'
  JwtSecret:
    Type: String
    Description: 'App jwt secret'

Resources:

  CloudMapNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub "${AWS::StackName}.local"
      Vpc: !ImportValue vpc-id-export

  # Define the EFS File System
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowECSAccess
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - "elasticfilesystem:ClientMount"
              - "elasticfilesystem:ClientWrite"
              - "elasticfilesystem:ClientRootAccess"
            Resource: "*"

  # EFS Mount Targets
  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !ImportValue public-subnet-1-export
      SecurityGroups:
        - !Ref SecurityGroup

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !ImportValue public-subnet-2-export
      SecurityGroups:
        - !Ref SecurityGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref CPU
      Memory: !Ref Memory
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-${Revision}"
          Image:
            !Join
            - ""
            - - !ImportValue 'itsanapi-ecr-export'
              - !Sub ":${Revision}"
          Essential: true
          Environment:
            - Name: IS_PRODUCTION
              Value: 'True'
            - Name: JWT_SECRET_KEY
              Value: !Sub "${JwtSecret}"
            - Name: QUEUE_URL
              Value: !ImportValue "email-worker-sqs-url-export"
            - Name: GOOGLE_CLIENT_ID
              Value: !Sub "${GoogleClientId}"
            - Name: GOOGLE_CLIENT_SECRET
              Value: !Sub "${GoogleClientSecret}"
            - Name: FRONTEND_CALLBACK_URL
              Value: !Sub "${FrontendCallbackURL}"
            - Name: LOG_LEVEL
              Value: !Sub "${LogLevel}"
            - Name: DATABASE_URL
              Value:
                !Join
                - ""
                - - "postgresql://"
                  - !Sub "${DbUserName}:${DbPassword}"
                  - "@"
                  - !Sub "postgres.${AWS::StackName}.local"
                  - "/"
                  - postgres
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref TaskLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
          DependsOn:
            - ContainerName: postgres
              Condition: START

        - Name: postgres
          Image: postgres:latest
          Essential: true
          PortMappings:
            - ContainerPort: 5432
          Environment:
            - Name: POSTGRES_USER
              Value: !Sub "${DbUserName}"
            - Name: POSTGRES_PASSWORD
              Value: !Sub "${DbPassword}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref TaskLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
          MountPoints:
            - SourceVolume: postgres-efs
              ContainerPath: /var/lib/postgresql/data

      Volumes:
        - Name: postgres-efs
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFSFileSystem

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue general-cluster-export
      ServiceName: !Sub "${AWS::StackName}"
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      EnableExecuteCommand: True
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue public-subnet-1-export
          SecurityGroups:
            - !Ref SecurityGroup
          AssignPublicIp: ENABLED
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      LoadBalancers:
        - ContainerName: !Sub "${AWS::StackName}-${Revision}"
          ContainerPort: 80
          TargetGroupArn: !ImportValue itsanapi-elb-targetgroup-export
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryService.Arn

  ServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      NamespaceId: !Ref CloudMapNamespace
      Name: postgres
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
      HealthCheckCustomConfig:
        FailureThreshold: 1

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue vpc-id-export
      GroupDescription: "Security Group for Fargate Service"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      Policies:
        - PolicyName: "AmazonECSTaskExecutionRolePolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - logs:*
                  - ec2:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - elb:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunction
                Resource: "*"
              - Effect: 'Allow'
                Action:
                  - 'sqs:SendMessage'
                Resource: '*'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  TaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}"
      RetentionInDays: 3
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"
